/*
Problem 12: Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

FYI: assuming that when they refer to 'divisors' they actually mean factors (numbers that divide with no remainder)
They are technically not the same as divisor refers to any number that you divide another number by. 
Factors are divisors but not all divisors are factors.
*/

#include <iostream>
#include <math.h>

/*
    Returns number of factors for an input number
    @param  num Number to check
    @return Number of factors for specified number
*/
int numFactors(int num) {
    if (num == 1) { // 1 only has 1 factor
        return 1;
    }
    
    int factors = 2;  // starting from 2, every number has at least 2 factors, 1 and itself
    
    for (int i = 2; i <= (num / 2); i++) { // only check up to half of specified number
        if ((num % i) == 0) {
            factors++;
        }
    }

    return factors;
}

int main() {
    int factors = 0;
    int triNumIndex = 0;
    int sum = 0;

    while (factors <= 500) {
        triNumIndex++;

        sum+= triNumIndex;

        factors = numFactors(sum);

        //std::cout << "trinum: " << triNumIndex << " " << sum << " " << factors << std::endl;
    }

    std::cout << "trinum: " << triNumIndex << " " << sum << " " << factors << std::endl;

    // trinumindex 12375 sum 76576500 factors 576

    return 0;
}